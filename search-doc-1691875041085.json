[{"title":"Event","type":0,"sectionRef":"#","url":"/signal/api/Event","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Event","url":"/signal/api/Event#functions","content":" "},{"title":"Connect​","type":1,"pageTitle":"Event","url":"/signal/api/Event#Connect","content":"&lt;/&gt; Event:Connect(callback: Callback) → Connection Connect a Callback to this Event. The Callback will be called every time this Event fires. It can be disconnected through the returned Connection. signal:Connect(function(event: string) print(event, &quot;was fired!&quot;) end)  "},{"title":"Connection","type":0,"sectionRef":"#","url":"/signal/api/Connection","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Connection","url":"/signal/api/Connection#functions","content":" "},{"title":"disconnect​","type":1,"pageTitle":"Connection","url":"/signal/api/Connection#disconnect","content":"&lt;/&gt; Connection.disconnect() → () Disconnects this connection. local connection = signal:Connect(callback) connection.disconnect()   "},{"title":"isConnected​","type":1,"pageTitle":"Connection","url":"/signal/api/Connection#isConnected","content":"&lt;/&gt; Connection.isConnected() → boolean Checks if this function is currently connected. local connection = signal:Connect(callback) if connection.isConnected() then print(&quot;We are connected!&quot;) end  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/signal/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/signal/docs/intro#installation","content":"To use this signal, you need to include it as a dependency in your wally.tomlfile. It can then be installed with Wally. Signal = &quot;lasttalon/signal@0.1.0&quot;  "},{"title":"Usage​","type":1,"pageTitle":"Getting Started","url":"/signal/docs/intro#usage","content":"To create a signal in your project, simply require the module and use the newconstructor. We can then manipulate the signal using the provided methods. local Signal = require(ReplicatedStorage.Packages.Signal) -- Create a new signal local signal = Signal.new() -- Connect a function to the signal signal:Connect(function() print(&quot;Signal fired!&quot;) end) -- Fire the signal signal:Fire()  Refer to the API documentation for more detailed information. "},{"title":"Signal","type":0,"sectionRef":"#","url":"/signal/api/Signal","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Signal","url":"/signal/api/Signal#types","content":" "},{"title":"Callback​","type":1,"pageTitle":"Signal","url":"/signal/api/Signal#Callback","content":"&lt;/&gt; type Callback = (...unknown) → () A function called when an Event fires. "},{"title":"Properties​","type":1,"pageTitle":"Signal","url":"/signal/api/Signal#properties","content":" "},{"title":"Event​","type":1,"pageTitle":"Signal","url":"/signal/api/Signal#Event","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Signal.Event: Event An Event that you can subscribe that can be provided to external consumers of this signal. This allows you to provide a signal that can be subscribed to, but not fired from the outside. In our module we can do something like this: local myObject = {} myObject.Event = Signal.new().Event return myObject Then in another script we can do: myObject.Event:Connect(function(event: string) print(event, &quot;was fired!&quot;) end)  "},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"/signal/api/Signal#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Signal","url":"/signal/api/Signal#new","content":"&lt;/&gt; Signal.new() → Signal Creates a new Signal.  "},{"title":"Connect​","type":1,"pageTitle":"Signal","url":"/signal/api/Signal#Connect","content":"&lt;/&gt; Signal:Connect(callback: Callback) → Connection Connect a Callback to this Signal. The Callback will be called every time this Signal fires. It can be disconnected through the returned Connection. signal:Connect(function(event: string) print(event, &quot;was fired!&quot;) end)   "},{"title":"Fire​","type":1,"pageTitle":"Signal","url":"/signal/api/Signal#Fire","content":"&lt;/&gt; Signal:Fire(...: unknown) → () Fires this Signal. Any parameters can be provided that will be passed to any listeningCallbacks. -- Fire the Signal and pass a string to any listeners signal:Fire(&quot;Our event&quot;)   "},{"title":"DisconnectAll​","type":1,"pageTitle":"Signal","url":"/signal/api/Signal#DisconnectAll","content":"&lt;/&gt; Signal:DisconnectAll() → () Disconnects every listener from this Signal. "}]