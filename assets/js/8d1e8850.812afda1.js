"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[374],{49164:n=>{n.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new Signal.","params":[],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"static","source":{"line":69,"path":"lib/init.lua"}},{"name":"Connect","desc":"Connect a [Callback] to this Signal.\\n\\nThe Callback will be called every time this Signal fires. It can be\\ndisconnected through the returned [Connection].\\n\\n```lua\\nsignal:Connect(function(event: string)\\n\\tprint(event, \\"was fired!\\")\\nend)\\n```","params":[{"name":"callback","desc":"","lua_type":"Callback"}],"returns":[{"desc":"","lua_type":"Connection\\n"}],"function_type":"method","source":{"line":149,"path":"lib/init.lua"}},{"name":"Fire","desc":"Fires this Signal.\\n\\nAny parameters can be provided that will be passed to any listening\\n[Callbacks](#Callback).\\n\\n```lua\\n-- Fire the Signal and pass a string to any listeners\\nsignal:Fire(\\"Our event\\")\\n```","params":[{"name":"...","desc":"","lua_type":"unknown"}],"returns":[],"function_type":"method","source":{"line":185,"path":"lib/init.lua"}},{"name":"DisconnectAll","desc":"Disconnects every listener from this Signal.","params":[],"returns":[],"function_type":"method","source":{"line":194,"path":"lib/init.lua"}}],"properties":[{"name":"Event","desc":"An Event that you can subscribe that can be provided to external consumers\\nof this signal.\\n\\nThis allows you to provide a signal that can be subscribed to, but not fired\\nfrom the outside.\\n\\nIn our module we can do something like this:\\n\\n```lua\\nlocal myObject = {}\\nmyObject.Event = Signal.new().Event\\n\\nreturn myObject\\n```\\n\\nThen in another script we can do:\\n\\n```lua\\nmyObject.Event:Connect(function(event: string)\\n\\tprint(event, \\"was fired!\\")\\nend)\\n```\\n\\n\\n\\t","lua_type":"Event","readonly":true,"source":{"line":131,"path":"lib/init.lua"}}],"types":[{"name":"Callback","desc":"A function called when an Event fires.","lua_type":"(...unknown) -> ()","source":{"line":49,"path":"lib/init.lua"}}],"name":"Signal","desc":"A Signal for firing events to subscribing listeners.","source":{"line":61,"path":"lib/init.lua"}}')}}]);